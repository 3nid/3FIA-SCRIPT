 #!/bin/bash


#  الالوان البرنت اف
BL='\e[01;90m%*s\n\e[m' # اسود
W='\e[01;97m%*s\n\e[m' # ابيض
R='\e[01;91m%*s\n\e[m' # احمر
G='\e[01;92m%*s\n\e[m' # اخضر
Y='\e[01;93m%*s\n\e[m' # اصفر
B='\e[01;94m%*s\n\e[m' # ازرق
P='\e[01;95m%*s\n\e[m'  # بنفسجي
C='\e[01;96m%*s\n\e[m'  # سماوي
LIN='\e[4m%*s\n\e[m' # خط
N='\e[0m%*s\n\e[m'  # طبيعي
#الوان ايشو
  NONE='\e[00m'
 RED='\e[01;31m'
 GREEN='\e[01;32m'
 YELLOW='\e[01;33m'
 PURPLE='\e[01;35m'
 CYAN='\e[01;36m'
 WHITE='\e[01;37m'
 BOLD='\e[1m'
 UNDERLINE='\e[4m' 
#قيم
accessfilesV=0
setvstng=0

    function main_top() # الدالة الرئسية
    {
        clear
        center_text "-" "-" 0 $R
        center_text "INSTALL YOUTUBE-DL" " " 0 $G
        center_text "SCRIPT" " " 0 $G
        center_text "By @whatoman in Twitter" " " 0 $B
        center_text "-" "-" 0 $R
        center_text "-" "-" 0 $N
    }
 

    function main_start() 
    {
        
        printf $N
        printf $N
        echo -e "This ${RED}SCRIPT${NONE} To Install Youtube-dll to can download  ${GREEN}${UNDERLINE}Video easy${NONE} with out any app has ${RED}Ads${NONE}"
        printf $N
        center_text "-" "-" 0 $N
        pause
		check
    }


	function main_go_start() 
    { 	    
    	clear
        main_top
        printf $N		
        center_text "Choose Option" " " 0 $R
        center_text "Only Write 1-2 and Press Enter" " " 0 $R
        center_text "---------------------------" " " 0 $R
        if [ "$setvstng" -eq "1" ]
            then
			center_text "1-  Settings        " " " 0 $N
			center_text "2-  Exit            " " " 0 $N
        else
			center_text "1-  Intall Youtube-dl" " " 0 $N
			center_text "2-  Exit             " " " 0 $N
        fi
        center_text "---------------------------" " " 0 $R
		echo "Enter your choice  : "
        read option

        if [ "$option" -eq "1" ]
            then
			if [ "$setvstng" -eq "1" ]
				then
				bash $HOME/oman
			else
            main_start_install
			fi

        elif [ "$option" -eq "2" ]
            then
			done_exit
        else
            main_go_start
        fi
    }


    function main_start_install() 
    {
		main_top
        yes | apt -y update && yes | apt -y upgrade
		yes | termux-setup-storage
		yes | pkg install -y python
		yes | pkg install -y wget
		yes | pkg install -y termimage
		yes | pip install youtube-dl
		yes | pkg install -y ffmpeg
		mkdir $HOME/storage/shared/Youtube
        mkdir -p $HOME/.config/youtube-dl
        mkdir $HOME/bin
        mkdir -p $HOME/.arabmod/youtube-dl
        wget https://raw.githubusercontent.com/3nid/YtDown/main/h/a/fordown -O $HOME/bin/termux-url-opener
        wget https://raw.githubusercontent.com/3nid/YtDown/main/h/yticon -O $HOME/.arabmod/youtube-dl/youtubedlicon
        wget https://raw.githubusercontent.com/3nid/YtDown/main/h/settings -O $HOME/oman
        dos2unix $HOME/bin/termux-url-opener
        dos2unix $HOME/oman
		((setvstng++))
		main_finsh
	}

    function main_finsh() 
    {
		main_top
		printf $N
		printf $N
		center_text "-------" " " 0 $G
		center_text "DONE" " " 0 $G
		center_text "-------" " " 0 $G
		printf $N
		center_text "Go to try download" " " 0 $G
		printf $N
		center_text "-" "-" 0 $N
		done_back
    }


    function check() # دالة التاكد من صلاحيات الوصول لملفات
    {
        if [ -d $HOME/storage/shared/ ] 
            then
		    clear
		    main_top
            printf $N
            printf $N		  
            center_text "Floder And files is access" " " 0 $G
            center_text " Wait 3 seconds " " " 0 $R
            read -t 3 -s -n 1 -p " "
            main_go_start
        else
		    ((accessfilesV++))
			try_access_files
        fi
    }


	function try_access_files() 
    {
	    clear
        if [ "$accessfilesV" -eq "1" ]
			then
			try_access_files_s
        elif [ "$accessfilesV" -eq "2" ]
			then
			try_access_files_s
        else
			try_access_files_s
			main_top
			printf $N
			printf $N
			center_text "SORRY" "=" 2 $B
			center_text "cant access Floder" " " 0 $G
			center_text "do it manuall" " " 0 $R
			echo -e "GOTO ${RED}Settings${NONE}>${GREEN}AppsNFO${NONE}>${PURPLE}Termux${NONE}"
			echo -e "${RED}Cleen data${NONE} and ${GREEN}Allowed Files{NONE}"
			printf $N
			done_exit
        fi
    }


	function try_access_files_s() # دالة لتشغيل صلاحيات الوصول لملفات
    {
		main_top
		printf $N
		printf $N
		center_text "Little time" " " 0 $B
		center_text "A window will appear for you to access files" " " 0 $G
		center_text "press grant" " " 0 $R
		termux-setup-storage
		pause
		check
	}


    function center_text()
    {

        local terminal_width=$(tput cols)     # query the Terminfo database: number of columns
        local text="${1:?}"                   # text to center
            local glyph="${2:-=}"                 # glyph to compose the border
                local padding="${3:-2}"               # spacing around the text
        local text_width=${#text}             
        local border_width=$(( (terminal_width - (padding * 2) - text_width) / 2 ))
        local border=                         # shape of the border
           # create the border (left side or right side)
        for ((i=0; i<border_width; i++))
            do
                    border+="${glyph}"
                        done
           # a side of the border may be longer (e.g. the right border)
        if (( ( terminal_width - ( padding * 2 ) - text_width ) % 2 == 0 ))
            then
                    # the left and right borders have the same width
            local left_border=$border
            local right_border=$left_border
        else
                        # the right border has one more character than the left border
                        # the text is aligned leftmost
            local left_border=$border
            local right_border="${border}${glyph}"
        fi
             # space between the text and borders
        local spacing=
        for ((i=0; i<$padding; i++))
        do
            spacing+=" "
                done
             # displays the text in the center of the screen, surrounded by borders.
        coco=$4
        coo=0
        printf $coco  $coo "${left_border}${spacing}${text}${spacing}${right_border}"
    }



    function pause()
	{
      read -s -n 1 -p "Press any key to continue . . ."
      printf $N
    }

	function done_back()
	{
      read -s -n 1 -p "Press any key to BACK"
	  main_go_start
    }


	function done_exit()
	{
      main_top
      printf $N
      printf $N
      printf $N
	  read -s -n 1 -p "Press any key To Eixt . . ."
	  clear -x
      exit
    }

    function check_net() # دالة التاكد من صلاحيات الوصول لـ الانترنت
    {
		ping -c 1 -t 5 8.8.8.8 2&>1 # المخرجات 1 غير متصل و 2متصل  لمعرفة حالة الاتصال بالانترنت
		rc=$?
		if [ "$rc" -eq 2 ]
			then
			clear
			printf $N
			printf $N
			titlee="----------------------"
			printf $Y $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			titlee="----------------------"
			printf $Y $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			titlee="YOUTUBE DOWNLOADER"
			printf $G $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			titlee="SCRIPT BY @WHATOMAN"
			printf $B $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			titlee="----------------------"
			printf $Y $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			titlee="----------------------"
			printf $Y $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			printf $N
			printf $N
			titlee="You are not connected"
			printf $R $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			titlee="----------------------"
			printf $R $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			printf $N
			printf $N
			titlee="Press any key to try agin"
			printf $R $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			titlee="or press E to Exis"
			printf $R $(((${#titlee}+$COLUMNS)/2)) "$titlee"
			printf $N
			printf "               "
			read -s -n 1 option
			if [ $option=e ]
				then
				clear -x
				exit
			elif [ $option=E ]
				then
				clear -x
				exit
			else
			check_net
			fi
		else
			pkg install ncurses-utils
			main_top
			main_start
        fi
    }
check_net